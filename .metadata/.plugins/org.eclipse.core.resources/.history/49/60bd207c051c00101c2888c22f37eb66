package com.kh.opendata.run;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;


public class AirPollutionJavaApp {
	// 전역변수로 고정
	public static final String serviceKey = "7X77em5gX4WgOrWP3owuijw1JS%2BIWxvqscOFW048IKzYlOQWRp%2F%2F%2F081v0JpvR0y21MjEvM0ZW7Sk%2BiSihX0UA%3D%3D";
	
	public static void main(String[] args) throws IOException {

		// OPENAPI 서버로 요청하고자 하는 URL 만들기

		String url = "https://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty";
		url += "?serviceKey=" + serviceKey;
		// 서비스키가 제대로 부여되지 않았을 경우
		// => SERVICE_KEY_IS_NOT_REGISTERED_ERROR
		url += "&sidoName=" + URLEncoder.encode("서울", "UTF-8");
		// 요청시 전달값 중 한글이 있을 경우 encoding 해야 함
		// addthrows로
//		url += "&returnType=xml";
		url += "&returnType=json";

		// * HttpHRLConnection 객체를 활용해서 OPEN API 요청 절차
		// 1. 요청하고자 하는 url 전달하면서 java.net.URL 객체 생성
		URL requestUrl = new URL(url);
		
		// 2. 1번 과정으로 생성된 URL객체를 가지고 HttpURLConnection 객체 생성
		HttpURLConnection urlConnection = (HttpURLConnection)requestUrl.openConnection();
		
		// 3. 요청에 필요한 Header 설정하기
		urlConnection.setRequestMethod("GET");
		
		// 4. 해당 OPENAPI 서버로 요청 보낸 후 입력 스트림을 통해 응답데이터 읽어들이기
		BufferedReader br = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()) );
		
		String responseText = "";
		String line;
		while((line = br.readLine()) != null) {
			responseText += line;
			System.out.println(responseText);
		}
		
		/*
		 * {
"response":
	{
	"body":{
		"totalCount":40,
		"items":[
				{"so2Grade":"1",
				 "coFlag":null,
				 "khaiValue":"75",
				 "so2Value":"0.003",
				 "coValue":"0.4",
				 "pm10Flag":null,
				 "o3Grade":"2",
				 "pm10Value":"65",
				 "khaiGrade":"2",
				 "sidoName":"서울",
				 "no2Flag":null,
				 "no2Grade":"1",
				 "o3Flag":null,
				 "so2Flag":null,
				 "dataTime":"2025-04-18 12:00",
				 "coGrade":"1",
				 "no2Value":"0.024",
				 "stationName":"중구",
		 */
		
		// JsonObject, JsonArray, JsonElement 이용해서 파싱 가능
		// (gson 라이브러리)
		// 각각 정보를 => AirVO 객체에 담고 => ArrayList 차곡차곡
		
		JsonObject totalObj = JsonParser.parseString(responseText).getAsJsonObject();
		JsonObject responseObj = totalObj.getAsJsonObject("response");
		// response 속성 접근 => {} JsonObject
		System.out.println(responseObj);
		
		
		
		// 5. 다 사용한 스트림 반납
//		br.close();
//		urlConnection.disconnect();
		

	
	}

}
