package com.kh.spring.member.controller;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.kh.spring.member.model.service.MemberServiceImpl;
import com.kh.spring.member.model.vo.Member;

@Controller // Controller 타입의 어노테이션을 붙여주면 bean 스캐닝을 통해 자동으로 bean 등록
public class MemberController {
	
	@Autowired // DI (Dependency Injection) 특징
	private MemberServiceImpl mService; // Spring 기능 생성
	// 필드부 개념으로 전역변수를 생성한다. 따라서 [접근제한자]가 필요함.
	// 1. MemberServiceImpl이 스프링으로 등록되어 있어야 함.
	// 2. @Autowired 등록되어있어야 함. (어노테이션 Autowired 타입) => spring에서 주입 가능
	
	@Autowired
	private BCryptPasswordEncoder bcryptPasswordEncoder;
	
	
	
	/*
	// RequestMapping 타입의 어노테이션을 붙여줌으로써 HanlerMapping 효과
	@RequestMapping(value="login.me")
	public void loginMember() {

	}
	
	@RequestMapping(value="insert.me")
	public void insertMember() {

	}
	
	public void updateMember() {

	}
	*/
	
	/*
	 * * 파라미터(요청시 전달값)를 받는 방법 (요청시 전달되는 값들 처리하는 방법)
	 * 
	 * 	1. HttpServletRequest를 이용해서 전달받기 (기존의 jsp/servlet 때 방식)
	 * 		해당 메소드의 매개변수로 HttpServletRequest를 작성해두면
	 * 		스프링 컨테이너가 해당 메소드 호출시(실행시) 자동으로 객체를 생성해서 인자로 주입해줌

	@RequestMapping("login.me")
	public String loginMember(HttpServletRequest request) {
		String userId = request.getParameter("id");
		String userPwd = request.getParameter("pwd");
		
		System.out.println("ID : " + userId);
		System.out.println("PWD : " + userPwd);
		
		return "main";
	}
	*/
	
	/*
	 * 2. @RequestParam 어노테이션을 이용하는 방버
	 * 		request.getparameter("키") : 밸류의 역할을 대신해주는 어노테이션

	@RequestMapping("login.me")
	public String loginMember( @RequestParam(value="id", defaultValue = "aaa") String userId, 
								@RequestParam(value="pwd") String userPwd) {
		System.out.println("ID : " + userId);
		System.out.println("PWD : " + userPwd);
		
		return "main";
	}
	*/
	
	/*
	 * 3. @RequestParam 어노테이션을 생략하는 방법
	 * 	*** 단, 매개변수명은 jsp의 name값과 동일하게 셋팅해줘야 자동으로 값이 주입된다.

	@RequestMapping("login.me")
	public String loginMember(String id, String pwd) {
		// 반드시 jsp의 name과 같은 값으로 넣어야 한다.
//		System.out.println("ID : " + id);
//		System.out.println("PWD : " + pwd);
		Member m = new Member();
		m.setUserId(id);
		m.setUserPwd(pwd);
		
		return "main";
	}
	*/
	
	/*
	 * 4. 커맨드 객체 방식
	 * 		해당 메소드의 매개변수로
	 * 		요청시 전달값을 담고자 하는 vo클래스 타입을 세팅 후
	 * 		요청시 전달값의 키값(jsp의 name값)을 vo클래스에 담고자하는 필드명으로 작성
	 *		
	 *		스프링 컨테이너가 해당 객체를 기본생성자로 생성 후 setter 메소드를 찾아서
	 *		요청시 전달값을 해당 필드에 담아주는 내부적인 원리
	 *		** 반드시 name 속성값(키값)과 담고자하는 필드명 동일해야 함.

	@RequestMapping("login.me")
	public String loginMember(Member m) {
		// jsp에서 name값을 Member vo랑 맞춰서 적어야 한다.
		
		Member loginUser = mService.loginMember(m);
		
		if(loginUser == null) { // 로그인 실패 => requestScope에 담고, 에러페이지로 포워딩
			System.out.println("로그인실패");
		}else { // 로그인 성공 => loginUser를 sessionScope에 담고, 메인페이지로 url 재요청
			System.out.println("로그인성공");
		}
		
		return "main";
	}
	*/
	
	/*
	 * * 요청 처리 후 응답데이터로 포워딩 또는 url 재요청, 응답데이터 담는 방법
	 * 1. 스프링에서 제공하는 Model 객체를 사용하는 방법
	 * 	포워딩할 뷰로 전달하고자 하는 데이터를 맵형식(key-value)으로 담을 수 있는 영역
	 * 	Model 객체는 requestScope이다.
	 * 	단, setAttribute()가 아닌 addAttribute() 메소드 이용
	 
	@RequestMapping("login.me")
	public String loginMember(Member m, Model model, HttpSession session) {
		// 알아서 매개변수의 내용에서 new 객체 생성. => DI의 특징
		Member loginUser = mService.loginMember(m);
		
		if(loginUser == null) { // 로그인 실패 => 에러페이지로 포워딩
			model.addAttribute("errorMsg", "로긴실패"); 
			return "common/errorPage"; // /WEB-INF/views/ xxxx. /jsp 자동으로 해줌.
		}else { // 로그인 성공 => loginUser를 sessionScope에 담고, 메인페이지로 url 재요청
			session.setAttribute("loginUser", loginUser);
			return "redirect:/";
		}

	}
	*/
	
	/*
	 * 2. 스프링에서 제공하는 ModelAndView 객체를 이용하는 방법
	 * 
	 * 	Model 데이터를 Key-value 세트로 담을 수 있는 공간이라고 한다면
	 * 	View는 응답뷰에 대한 정보를 담을 수 있는 공간
	 */
	
	@RequestMapping("login.me")
	/*
	public ModelAndView loginMember(Member m, HttpSession session, ModelAndView mv) { // import처리
		// 알아서 매개변수의 내용에서 new 객체 생성. => DI의 특징
		Member loginUser = mService.loginMember(m);
		
		if(loginUser == null) { // 로그인 실패 => 에러페이지로 포워딩
			mv.addObject("errorMsg", "로긴실패");
			mv.setViewName("common/errorPage");
		}else { // 로그인 성공 => loginUser를 sessionScope에 담고, 메인페이지로 url 재요청
			session.setAttribute("loginUser", loginUser);
			mv.setViewName("redirect:/");
		}
		return mv;
	}
	*/
	
	// 암호화 작업 후 해야 하는 과정
	// Member m userId 필드 : 사용자가 입력한 Id
	//			userPwd 필드 : 사용자가 입력한 비번(평문)
	public ModelAndView loginMember(Member m, HttpSession session, ModelAndView mv) {
		Member loginUser = mService.loginMember(m);
		// loginUser : 오로지 아이디만을 가지고 조회한 회원
		// loginUser userPwd 필드 : db에 기록된 비번(암호문)
		
		if(loginUser != null && bcryptPasswordEncoder.matches(m.getUserPwd(), loginUser.getUserPwd())) {
			// 로그인 성공
			session.setAttribute("loginUser", loginUser);
			mv.setViewName("redirect:/");
		}else { // 실패
			mv.addObject("errorMsg", "로긴실패");
			mv.setViewName("common/errorPage");
		}
		return mv;
	}
	
	@RequestMapping("logout.me")
	public String logoutMember(HttpSession session) {
		session.invalidate(); // invalidate() 모든 것을 무력화
		return "redirect:/";
	}
	
	@RequestMapping("enrollForm.me")
	public String enrollForm() {
		// /WEB-INF/views/  member/memberEnrollForm  .jsp 로 포워딩
		return "member/memberEnrollForm";
	}
	
	@RequestMapping("insert.me")
	public String insertMember(Member m, Model model, HttpSession session) {
		// 1. 한글 깨짐 == 스프링에서 제공하는 인코딩필터 등록(mybatis와 같이 filter 등록)
		// 2. 나이를 입력하지 않았을 경우, "" 빈문자열이 넘어오는데 int형 필드에 담을 수 없다. 400error 발생.
		//	=> Member 클래스의 age필드를 int형 => String형으로 변경 => vo 변경.
		// 3. 비밀번호가 사용자가 입력한 있는 그대로의 평문
		// 	=> Bcrypt 방식의 암호화를 통해서 암호문으로 변경
		// 	=> 1) 스프링 시큐리티 모듈에서 제공 (라이브러리 추가 pom.xml)
		//	=> 2) BcryptPasswordEncoder 라는 클래스를 bean으로 등록(xml 파일에)
		//	=> 3) web.xml에 spring-security.xml 파일을 pre-loading 할 수 있도록 작성
		
		// 암호화 작업(암호문을 만들어내는 과정)
		String encPwd = bcryptPasswordEncoder.encode(m.getUserPwd());
		
		m.setUserPwd(encPwd); // Member객체의 userPwd에 암호문으로 변경
		
		int result = mService.insertMember(m);
		
		if(result > 0) { // 모델 선언으로. 메인페이지 url 재요청
			session.setAttribute("alertMsg", "회원가입성공");
			return "redirect:/";
		}else { // 에러문구 담아서 에러페이지
			model.addAttribute("errorMsg", "회원가입실패");
			return "common/errorPage";
		}
		
	}
	
	@RequestMapping("myPage.me")
	public String myPage() {
		return "member/myPage";
	}
	
	@RequestMapping("update.me")
	public String updateMember(Member m, Model model, HttpSession session) {
		// name 값을 반드시 vo(게터세터) 맞춰야 한다.
		int result = mService.updateMember(m);
	
		if(result > 0) { // 수정 성공
			// db로부터 수정된 회원정보를 다시 조회해서
			// session을 갈아끼우는 작업을 해야 함.
//			Member updateMem = mService.loginMember(m); // db돌리기(로긴덮어씌우기)
//			session.setAttribute("loginUser", mService.loginMember(m)); // 로긴한 유저를 갱신
			session.setAttribute("loginUser", mService.loginMember(m));
			
			// alert문구
			session.setAttribute("alertMsg", "회원수정 성공");
			
			// 마이페이지 url 갈아끼우기(재요청)
			return "redirect:myPage.me"; // 마이페이지로 가니까 '/' 이쪽에다가 서블릿을 적음.
		}else { // 수정 실패 => 에러문구, 에러페이지 포워딩
			model.addAttribute("errorMsg", "회원수정실패");
			return "common/errorPage";
		}
	}
	
	@RequestMapping("delete.me")
	public String deleteMember(String userId, String userPwd, HttpSession session, Model model) {
		// 알아서 param값을 맞춰서 적용해줌
		// userPwd : 회원 탈퇴시 사용자가 입력한 비밀번호 평문
		// session에 loginUser Member 객체 userPwd : db로부터 조회한 암호문
		String encPwd = ((Member)session.getAttribute("loginUser")).getUserPwd(); // 암호문 추출
		
		int result = mService.deleteMember(userId);
		
		if(bcryptPasswordEncoder.matches(userPwd, encPwd)) { // 맞음 => 탈퇴처리
			session.setAttribute("", value);
			
			session.setAttribute("alertMsg", "탈퇴성공");
			
			return "main";
			
		}else { // 비번틀림 => 알림, 마이페이지 보여지게
			model.addAttribute("errorMsg", "탈퇴실패");
			return "common/errorPage";	
		}
		
	}

}
